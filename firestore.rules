rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Auth & role helpers ----------
    function isAuthenticated() {
      return request.auth != null;
    }

    // Prefer custom claim (request.auth.token.role). Fallback to /users doc.role if present.
    function getUserRole() {
      return isAuthenticated()
        ? (request.auth.token.role != null
            ? request.auth.token.role
            : (exists(/databases/$(database)/documents/users/$(request.auth.uid))
                ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
                : null))
        : null;
    }

    function userExists() {
      return isAuthenticated()
        && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isAdmin()           { return getUserRole() == 'admin'; }
    function isInstructor()      { return getUserRole() == 'instructor'; }
    function isParticipant()     { return getUserRole() == 'participant'; }
    function isSupportWorker()   { return getUserRole() == 'support_worker'; }
    function isServiceProvider() { return getUserRole() == 'service_provider'; }
    function isFitnessPartner()  { return getUserRole() == 'fitness_partner'; }

    // ---------- USERS ----------
    match /users/{userId} {
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow read: if (isAuthenticated() && request.auth.uid == userId) || isAdmin();
      allow update: if (isAuthenticated() && request.auth.uid == userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // ---------- PROGRAMS ----------
    match /programs/{programId} {
      allow read: if isAuthenticated();
      allow create, update: if userExists() && (isAdmin() || isInstructor());
      allow delete: if userExists() && isAdmin();
    }

    // ---------- SESSIONS ----------
    match /sessions/{sessionId} {
      allow read: if isAuthenticated();
      allow create: if userExists() && (isAdmin() || isInstructor());
      allow update: if userExists() && (isAdmin() || (isInstructor() && resource.data.instructorId == request.auth.uid));
      allow delete: if userExists() && isAdmin();
    }

    // ---------- FACILITIES ----------
    match /facilities/{facilityId} {
      allow read: if isAuthenticated();
      allow create: if userExists() && (isAdmin() || isFitnessPartner());
      allow update: if userExists() && (isAdmin() || (isFitnessPartner() && resource.data.partnerId == request.auth.uid));
      allow delete: if userExists() && isAdmin();
    }

    // ---------- PROGRESS ----------
    match /progress/{progressId} {
      allow read: if userExists() && (
        (isParticipant() && resource.data.participantId == request.auth.uid) ||
        (isInstructor() && resource.data.instructorId == request.auth.uid) ||
        (isSupportWorker() &&
          exists(/databases/$(database)/documents/users/$(resource.data.participantId)) &&
          get(/databases/$(database)/documents/users/$(resource.data.participantId)).data.supportWorkerId == request.auth.uid) ||
        (isServiceProvider() &&
          exists(/databases/$(database)/documents/users/$(resource.data.participantId)) &&
          get(/databases/$(database)/documents/users/$(resource.data.participantId)).data.serviceProviderId == request.auth.uid) ||
        isAdmin()
      );
      allow create, update: if userExists() && (isAdmin() || (isInstructor() && request.resource.data.instructorId == request.auth.uid));
      allow delete: if userExists() && isAdmin();
    }

    // ---------- CARE PLANS ----------
    match /carePlans/{carePlanId} {
      allow create: if isAuthenticated()
        && request.auth.uid == carePlanId
        && request.resource.data.participantId == request.auth.uid;

      allow read: if userExists() && (
        (isParticipant() && resource.data.participantId == request.auth.uid) ||
        (isServiceProvider() && resource.data.serviceProviderId == request.auth.uid) ||
        (isSupportWorker() && resource.data.supportWorkerId == request.auth.uid) ||
        isAdmin()
      );

      allow update: if userExists() && (isAdmin() || (isServiceProvider() && resource.data.serviceProviderId == request.auth.uid));
      allow delete: if userExists() && isAdmin();
    }

    // ---------- ASSIGNMENTS ----------
    match /assignments/{assignmentId} {
      allow read: if isAuthenticated() && (
        resource.data.participantId == request.auth.uid ||
        resource.data.instructorId == request.auth.uid ||
        resource.data.supportWorkerId == request.auth.uid ||
        resource.data.serviceProviderId == request.auth.uid ||
        isAdmin()
      );
      allow create, update: if userExists() && (isAdmin() || isServiceProvider() || isInstructor());
      allow delete: if userExists() && (isAdmin() || isServiceProvider());
    }

    // ---------- NOTIFICATIONS ----------
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated()
        && resource.data.userId == request.auth.uid
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read','readAt']);
      allow create: if isAuthenticated();
    }

    // ---------- REPORTS ----------
    match /reports/{reportId} {
      allow read: if userExists() && (
        isAdmin() ||
        (isServiceProvider() && resource.data.serviceProviderId == request.auth.uid) ||
        (isInstructor() && resource.data.instructorId == request.auth.uid)
      );
      allow create: if userExists() && (
        isAdmin() ||
        (isInstructor() && request.resource.data.instructorId == request.auth.uid)
      );
      allow update, delete: if userExists() && isAdmin();
    }

    // ---------- FORMS ----------
    function validForm() {
      return request.resource.data.keys().hasAll([
        'type','role','submittedByUid','submittedByName','status','submissionDate'
      ])
      && request.resource.data.type in [
        'Client Management Form','Group Management Form','Feedback Form','Progress Overview','Training Program'
      ]
      && request.resource.data.role in [
        'participant','support_worker','fitness_partner','service_provider','instructor'
      ]
      && request.resource.data.status in ['completed','pending_review','in_review','overdue']
      && request.resource.data.submittedByUid is string
      && request.resource.data.submittedByName is string
      && request.resource.data.submissionDate is timestamp;
    }

    function roleMatchesType() {
      return
        (isSupportWorker()   && request.resource.data.type == 'Client Management Form') ||
        (isFitnessPartner()  && request.resource.data.type == 'Group Management Form') ||
        (isServiceProvider() && request.resource.data.type == 'Feedback Form') ||
        (isInstructor()      && request.resource.data.type == 'Progress Overview') ||
        (isParticipant()     && request.resource.data.type == 'Training Program') ||
        isAdmin();
    }

    match /forms/{formId} {
      allow read: if isAdmin() ||
        (isAuthenticated() && resource.data.submittedByUid == request.auth.uid);
      allow create: if isAuthenticated()
        && validForm()
        && roleMatchesType()
        && request.resource.data.submittedByUid == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    // ---------- Default deny ----------
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

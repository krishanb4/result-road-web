rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to get user role (with better error handling)
    function getUserRole() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) ? 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : 
        null;
    }
    
    // Helper function to check if user exists in users collection
    function userExists() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return getUserRole() == 'admin';
    }
    
    // Helper function to check if user is instructor
    function isInstructor() {
      return getUserRole() == 'instructor';
    }
    
    // Helper function to check if user is participant
    function isParticipant() {
      return getUserRole() == 'participant';
    }
    
    // Helper function to check if user is support worker
    function isSupportWorker() {
      return getUserRole() == 'support_worker';
    }
    
    // Helper function to check if user is service provider
    function isServiceProvider() {
      return getUserRole() == 'service_provider';
    }
    
    // Helper function to check if user is fitness partner
    function isFitnessPartner() {
      return getUserRole() == 'fitness_partner';
    }

    // Users collection
    match /users/{userId} {
      // CRITICAL: Allow initial user creation for authenticated users
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can read and write their own profile
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      
      // Admins can read all user profiles (only if admin user exists)
      allow read: if userExists() && isAdmin();
      
      // Service providers can read their assigned participants and support workers
      allow read: if userExists() && isServiceProvider() && 
        (resource.data.keys().hasAny(['serviceProviderId']) && 
         resource.data.serviceProviderId == request.auth.uid || 
         resource.data.role == 'support_worker');
      
      // Support workers can read their assigned participants
      allow read: if userExists() && isSupportWorker() && 
        resource.data.keys().hasAny(['supportWorkerId']) &&
        resource.data.supportWorkerId == request.auth.uid;
      
      // Instructors can read participants in their programs
      allow read: if userExists() && isInstructor() && resource.data.role == 'participant';
      
      // Fitness partners can read instructors at their facilities
      allow read: if userExists() && isFitnessPartner() && resource.data.role == 'instructor';
    }

    // Programs collection
    match /programs/{programId} {
      // All authenticated users can read programs
      allow read: if isAuthenticated();
      
      // Admins and instructors can create and update programs
      allow create, update: if userExists() && (isAdmin() || isInstructor());
      
      // Only admins can delete programs
      allow delete: if userExists() && isAdmin();
    }

    // Sessions collection
    match /sessions/{sessionId} {
      // All authenticated users can read sessions
      allow read: if isAuthenticated();
      
      // Admins and instructors can create and update sessions
      allow create, update: if userExists() && (isAdmin() || isInstructor());
      
      // Instructors can only update sessions they're assigned to
      allow update: if userExists() && isInstructor() && 
        resource.data.keys().hasAny(['instructorId']) &&
        resource.data.instructorId == request.auth.uid;
      
      // Only admins can delete sessions
      allow delete: if userExists() && isAdmin();
    }

    // Facilities collection
    match /facilities/{facilityId} {
      // All authenticated users can read facilities
      allow read: if isAuthenticated();
      
      // Admins and fitness partners can create and update facilities
      allow create, update: if userExists() && (isAdmin() || isFitnessPartner());
      
      // Fitness partners can only update their own facilities
      allow update: if userExists() && isFitnessPartner() && 
        resource.data.keys().hasAny(['partnerId']) &&
        resource.data.partnerId == request.auth.uid;
      
      // Only admins can delete facilities
      allow delete: if userExists() && isAdmin();
    }

    // Progress collection
    match /progress/{progressId} {
      // Participants can read their own progress
      allow read: if userExists() && isParticipant() && 
        resource.data.keys().hasAny(['participantId']) &&
        resource.data.participantId == request.auth.uid;
      
      // Instructors can read and write progress for their students
      allow read, write: if userExists() && isInstructor() && 
        resource.data.keys().hasAny(['instructorId']) &&
        resource.data.instructorId == request.auth.uid;
      
      // Support workers can read progress for their assigned participants
      allow read: if userExists() && isSupportWorker() && 
        resource.data.keys().hasAny(['participantId']) &&
        exists(/databases/$(database)/documents/users/$(resource.data.participantId)) &&
        get(/databases/$(database)/documents/users/$(resource.data.participantId)).data.keys().hasAny(['supportWorkerId']) &&
        get(/databases/$(database)/documents/users/$(resource.data.participantId)).data.supportWorkerId == request.auth.uid;
      
      // Service providers can read progress for their participants
      allow read: if userExists() && isServiceProvider() && 
        resource.data.keys().hasAny(['participantId']) &&
        exists(/databases/$(database)/documents/users/$(resource.data.participantId)) &&
        get(/databases/$(database)/documents/users/$(resource.data.participantId)).data.keys().hasAny(['serviceProviderId']) &&
        get(/databases/$(database)/documents/users/$(resource.data.participantId)).data.serviceProviderId == request.auth.uid;
      
      // Admins can read and write all progress
      allow read, write: if userExists() && isAdmin();
    }

    // Care plans collection - FIXED
    match /carePlans/{carePlanId} {
      // CRITICAL: Allow participants to create their own care plan during registration
      allow create: if isAuthenticated() && request.auth.uid == carePlanId &&
        request.resource.data.participantId == request.auth.uid;
      
      // Participants can read their own care plans
      allow read: if userExists() && isParticipant() && 
        resource.data.keys().hasAny(['participantId']) &&
        resource.data.participantId == request.auth.uid;
      
      // Service providers can read and write care plans for their participants
      allow read, write: if userExists() && isServiceProvider() && 
        resource.data.keys().hasAny(['serviceProviderId']) &&
        resource.data.serviceProviderId == request.auth.uid;
      
      // Support workers can read care plans for their assigned participants
      allow read: if userExists() && isSupportWorker() && 
        resource.data.keys().hasAny(['supportWorkerId']) &&
        resource.data.supportWorkerId == request.auth.uid;
      
      // Admins can read and write all care plans
      allow read, write: if userExists() && isAdmin();
    }

    // Assignments collection
    match /assignments/{assignmentId} {
      // Users can read assignments that involve them
      allow read: if isAuthenticated() && 
        (resource.data.keys().hasAny(['participantId']) && resource.data.participantId == request.auth.uid ||
         resource.data.keys().hasAny(['instructorId']) && resource.data.instructorId == request.auth.uid ||
         resource.data.keys().hasAny(['supportWorkerId']) && resource.data.supportWorkerId == request.auth.uid ||
         resource.data.keys().hasAny(['serviceProviderId']) && resource.data.serviceProviderId == request.auth.uid);
      
      // Admins, service providers, and instructors can create and update assignments
      allow create, update: if userExists() && (isAdmin() || isServiceProvider() || isInstructor());
      
      // Only admins and service providers can delete assignments
      allow delete: if userExists() && (isAdmin() || isServiceProvider());
    }

    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && 
        resource.data.keys().hasAny(['userId']) &&
        resource.data.userId == request.auth.uid;
      
      // Users can mark their own notifications as read
      allow update: if isAuthenticated() && 
        resource.data.keys().hasAny(['userId']) &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      
      // System can create notifications for users
      allow create: if isAuthenticated();
    }

    // Reports collection
    match /reports/{reportId} {
      // Admins can read all reports
      allow read, write: if userExists() && isAdmin();
      
      // Service providers can read reports for their participants
      allow read: if userExists() && isServiceProvider() && 
        resource.data.keys().hasAny(['serviceProviderId']) &&
        resource.data.serviceProviderId == request.auth.uid;
      
      // Instructors can create and read reports for their sessions
      allow read, create: if userExists() && isInstructor() && 
        resource.data.keys().hasAny(['instructorId']) &&
        resource.data.instructorId == request.auth.uid;
    }
  }
}
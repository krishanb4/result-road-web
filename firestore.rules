rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // -------- Helpers --------
    function isAuthenticated() {
      return request.auth != null;
    }

    // Prefer custom claim; fallback to /users/{uid}.role if claim missing
    function getUserRole() {
      return isAuthenticated()
        ? (request.auth.token.role != null
            ? request.auth.token.role
            : (exists(/databases/$(database)/documents/users/$(request.auth.uid))
                ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
                : null))
        : null;
    }

    function isAdmin()           { return getUserRole() == 'admin'; }
    function isInstructor()      { return getUserRole() == 'instructor'; }
    function isParticipant()     { return getUserRole() == 'participant'; }
    function isSupportWorker()   { return getUserRole() == 'support_worker'; }
    function isServiceProvider() { return getUserRole() == 'service_provider'; }
    function isFitnessPartner()  { return getUserRole() == 'fitness_partner'; }

    // ---- NEW small helpers (non-breaking) ----
    function isUnchanged(keys) {
      return !request.resource.data.diff(resource.data).changedKeys().hasAny(keys);
    }

    function hasField(obj, key) {
      return obj.keys().hasAny([key]);
    }

    function validRoleMap() {
      return {
        'admin': true,
        'participant': true,
        'instructor': true,
        'fitness_partner': true,
        'service_provider': true,
        'support_worker': true
      };
    }

    // -------- USERS --------
    match /users/{userId} {
      // Create own profile (ensure uid field, if provided, matches)
      allow create: if isAuthenticated()
        && request.auth.uid == userId
        && (!hasField(request.resource.data, 'uid') || request.resource.data.uid == request.auth.uid)
        // Optional: if role is set on create by the client, require it to be a known role (no admin auto-self-assign)
        && (!hasField(request.resource.data, 'role') || request.resource.data.role in validRoleMap());

      // Read own OR role-based visibility OR admin
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin() ||
        // service provider can see users assigned to them or support workers
        (isServiceProvider() && (
          (resource.data.keys().hasAny(['serviceProviderId']) && resource.data.serviceProviderId == request.auth.uid) ||
          resource.data.role == 'support_worker'
        )) ||
        // support worker can see assigned participants
        (isSupportWorker() &&
          resource.data.keys().hasAny(['supportWorkerId']) &&
          resource.data.supportWorkerId == request.auth.uid
        ) ||
        // instructors can view participants
        (isInstructor() && resource.data.role == 'participant') ||
        // fitness partners can view instructors
        (isFitnessPartner() && resource.data.role == 'instructor')
      );

      // Update own (SAFE FIELDS ONLY) or admin (any)
      // Users cannot change their own role/status/assignedPrograms.
      allow update: if isAuthenticated() && (
        (request.auth.uid == userId && isUnchanged(['role','status','assignedPrograms'])) ||
        isAdmin()
      )
      && (!hasField(request.resource.data, 'role') || request.resource.data.role in validRoleMap());

      // Delete only by admin
      allow delete: if isAuthenticated() && isAdmin();
    }

    // -------- PROGRAMS --------
    match /programs/{programId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && (isAdmin() || isInstructor());
      allow delete: if isAuthenticated() && isAdmin();
    }

    // -------- SESSIONS --------
    match /sessions/{sessionId} {
      allow read: if isAuthenticated();

      allow create: if isAuthenticated() && (isAdmin() || isInstructor());

      // Instructors may update only their own sessions; admins any
      allow update: if isAuthenticated() && (
        isAdmin() ||
        (isInstructor() &&
          resource.data.keys().hasAny(['instructorId']) &&
          resource.data.instructorId == request.auth.uid)
      );

      allow delete: if isAuthenticated() && isAdmin();
    }

    // -------- FACILITIES --------
    match /facilities/{facilityId} {
      allow read: if isAuthenticated();

      allow create: if isAuthenticated() && (isAdmin() || isFitnessPartner());

      // Fitness partners can update facilities they own; admins any
      allow update: if isAuthenticated() && (
        isAdmin() ||
        (isFitnessPartner() &&
          resource.data.keys().hasAny(['partnerId']) &&
          resource.data.partnerId == request.auth.uid)
      );

      allow delete: if isAuthenticated() && isAdmin();
    }

    // -------- PROGRESS --------
    match /progress/{progressId} {
      // Participant sees own progress
      allow read: if isAuthenticated() && isParticipant() &&
        resource.data.keys().hasAny(['participantId']) &&
        resource.data.participantId == request.auth.uid;

      // Instructors: read/write for their participants
      allow read, write: if isAuthenticated() && isInstructor() &&
        resource.data.keys().hasAny(['instructorId']) &&
        resource.data.instructorId == request.auth.uid;

      // Support worker: read assigned participant progress
      allow read: if isAuthenticated() && isSupportWorker() &&
        resource.data.keys().hasAny(['participantId']) &&
        exists(/databases/$(database)/documents/users/$(resource.data.participantId)) &&
        get(/databases/$(database)/documents/users/$(resource.data.participantId)).data.keys().hasAny(['supportWorkerId']) &&
        get(/databases/$(database)/documents/users/$(resource.data.participantId)).data.supportWorkerId == request.auth.uid;

      // Service provider: read their participants' progress
      allow read: if isAuthenticated() && isServiceProvider() &&
        resource.data.keys().hasAny(['participantId']) &&
        exists(/databases/$(database)/documents/users/$(resource.data.participantId)) &&
        get(/databases/$(database)/documents/users/$(resource.data.participantId)).data.keys().hasAny(['serviceProviderId']) &&
        get(/databases/$(database)/documents/users/$(resource.data.participantId)).data.serviceProviderId == request.auth.uid;

      // Admin full access
      allow read, write: if isAuthenticated() && isAdmin();
    }

    // -------- CARE PLANS (participant create + limited update; provider/admin write; support read) --------
    match /carePlans/{carePlanId} {
      // Participant creates their own care plan during registration
      allow create: if isAuthenticated()
        && request.auth.uid == carePlanId
        && request.resource.data.participantId == request.auth.uid;

      // Participant can read own care plan (no userExists() to avoid signup race)
      allow read: if isAuthenticated() &&
        resource.data.keys().hasAny(['participantId']) &&
        resource.data.participantId == request.auth.uid;

      // Service provider can read & write care plans for their participants
      allow read, write: if isAuthenticated() && isServiceProvider() &&
        resource.data.keys().hasAny(['serviceProviderId']) &&
        resource.data.serviceProviderId == request.auth.uid;

      // Support worker can read care plans for assigned participants
      allow read: if isAuthenticated() && isSupportWorker() &&
        resource.data.keys().hasAny(['supportWorkerId']) &&
        resource.data.supportWorkerId == request.auth.uid;

      // Admins can read & write all care plans
      allow read, write: if isAuthenticated() && isAdmin();

      // Participant can update a safe subset of their own fields
      allow update: if isAuthenticated()
        && resource.data.keys().hasAny(['participantId'])
        && resource.data.participantId == request.auth.uid
        && carePlanParticipantSafeUpdate();

      function carePlanParticipantSafeUpdate() {
        return request.resource.data.diff(resource.data).changedKeys()
          .hasOnly(['goals','medicalInfo','planDocumentUrl','updatedAt','status']) &&
          request.resource.data.participantId == resource.data.participantId &&
          request.resource.data.participantId == request.auth.uid;
      }
    }

    // -------- ASSIGNMENTS --------
    match /assignments/{assignmentId} {
      // Read if the user is one of the parties (or admin)
      allow read: if isAuthenticated() && (
        (resource.data.keys().hasAny(['participantId'])     && resource.data.participantId     == request.auth.uid) ||
        (resource.data.keys().hasAny(['instructorId'])      && resource.data.instructorId      == request.auth.uid) ||
        (resource.data.keys().hasAny(['supportWorkerId'])   && resource.data.supportWorkerId   == request.auth.uid) ||
        (resource.data.keys().hasAny(['serviceProviderId']) && resource.data.serviceProviderId == request.auth.uid) ||
        isAdmin()
      );

      allow create, update: if isAuthenticated() && (isAdmin() || isServiceProvider() || isInstructor());
      allow delete: if isAuthenticated() && (isAdmin() || isServiceProvider());
    }

    // -------- NOTIFICATIONS --------
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() &&
        resource.data.keys().hasAny(['userId']) &&
        resource.data.userId == request.auth.uid;

      allow update: if isAuthenticated() &&
        resource.data.keys().hasAny(['userId']) &&
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read','readAt']);

      allow create: if isAuthenticated();
    }

    // -------- REPORTS --------
    match /reports/{reportId} {
      // Admin full access
      allow read, write: if isAuthenticated() && isAdmin();

      // Service providers can read reports for their participants
      allow read: if isAuthenticated() && isServiceProvider() &&
        resource.data.keys().hasAny(['serviceProviderId']) &&
        resource.data.serviceProviderId == request.auth.uid;

      // Instructors can create & read reports for their sessions
      allow read, create: if isAuthenticated() && isInstructor() &&
        resource.data.keys().hasAny(['instructorId']) &&
        resource.data.instructorId == request.auth.uid;
    }

    // -------- FORMS (generic) --------
    function validForm() {
      return request.resource.data.keys().hasAll([
        'type','role','submittedByUid','submittedByName','status','submissionDate'
      ])
      && request.resource.data.type in [
        'Client Management Form','Group Management Form','Feedback Form','Progress Overview','Training Program'
      ]
      && request.resource.data.role in [
        'participant','support_worker','fitness_partner','service_provider','instructor'
      ]
      && request.resource.data.status in ['completed','pending_review','in_review','overdue']
      && request.resource.data.submittedByUid is string
      && request.resource.data.submittedByName is string
      && request.resource.data.submissionDate is timestamp;
    }

    function roleMatchesType() {
      return
        (isSupportWorker()   && request.resource.data.type == 'Client Management Form') ||
        (isFitnessPartner()  && request.resource.data.type == 'Group Management Form') ||
        (isServiceProvider() && request.resource.data.type == 'Feedback Form') ||
        (isInstructor()      && request.resource.data.type == 'Progress Overview') ||
        (isParticipant()     && request.resource.data.type == 'Training Program') ||
        isAdmin();
    }

    match /forms/{formId} {
      allow read: if isAuthenticated() && (
        isAdmin() || resource.data.submittedByUid == request.auth.uid
      );
      allow create: if isAuthenticated()
        && validForm()
        && roleMatchesType()
        && request.resource.data.submittedByUid == request.auth.uid;
      allow update, delete: if isAuthenticated() && isAdmin();
    }

    // -------- ADDED: COMMON FORMS --------
    // commonForms/{id}: { uid, name, notes, createdAt, status }
    match /commonForms/{id} {
      // create: owner only
      allow create: if isAuthenticated()
        && hasField(request.resource.data, 'uid')
        && request.resource.data.uid == request.auth.uid;

      // read: owner or admin
      allow read: if isAuthenticated() && (
        isAdmin() || resource.data.uid == request.auth.uid
      );

      // update: owner (cannot change uid) or admin
      allow update: if isAuthenticated() && (
        (resource.data.uid == request.auth.uid && isUnchanged(['uid'])) || isAdmin()
      );

      // delete: admin only
      allow delete: if isAuthenticated() && isAdmin();
    }

    // -------- ADDED: FEEDBACK --------
    // feedback/{id}: { uid, role: 'service_provider'|'fitness_partner', sessionId, feedback, createdAt }
    match /feedback/{id} {
      allow create: if isAuthenticated()
        && hasField(request.resource.data, 'uid')
        && request.resource.data.uid == request.auth.uid;

      allow read: if isAuthenticated() && (
        isAdmin() || resource.data.uid == request.auth.uid
      );

      allow update: if isAuthenticated() && (
        (resource.data.uid == request.auth.uid && isUnchanged(['uid'])) || isAdmin()
      );

      allow delete: if isAuthenticated() && isAdmin();
    }

    // -------- ADDED: MONITORING --------
    // monitoring/{id}: { uid, clientId, observation, createdAt }
    match /monitoring/{id} {
      allow create: if isAuthenticated()
        && hasField(request.resource.data, 'uid')
        && request.resource.data.uid == request.auth.uid;

      allow read: if isAuthenticated() && (
        isAdmin() || resource.data.uid == request.auth.uid
      );

      allow update: if isAuthenticated() && (
        (resource.data.uid == request.auth.uid && isUnchanged(['uid'])) || isAdmin()
      );

      allow delete: if isAuthenticated() && isAdmin();
    }

    // -------- Default deny --------
    match /{document=**} {
      allow read, write: if false;
    }
    match /registrations/{uid} {
  allow create: if request.auth != null && request.auth.uid == uid;
  allow read:   if request.auth != null && (isAdmin() || resource.data.uid == request.auth.uid);
  allow update: if request.auth != null && isAdmin();
  allow delete: if request.auth != null && isAdmin();
}

  }
}
